{"version":3,"sources":["components/Form.jsx","components/Todo.jsx","components/TodoList.jsx","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["Form","setInputText","todos","setTodos","inputText","setStatus","type","className","onChange","event","target","value","onClick","preventDefault","text","completed","id","Math","floor","random","name","Todo","todo","map","item","filter","element","TodoList","filteredTodos","App","useState","status","setfilteredTodos","useEffect","getLocalTodos","filterHandler","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.db7d244f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = ({ setInputText, todos, setTodos, inputText, setStatus }) => {\r\n  const InputTextHandler = event => setInputText(event.target.value);\r\n  const submitTodoHandler = event => {\r\n    event.preventDefault();\r\n    setTodos([\r\n      ...todos,\r\n      {\r\n        text: inputText,\r\n        completed: false,\r\n        id: Math.floor(Math.random() * 1000) + 1,\r\n      },\r\n    ]);\r\n    setInputText('');\r\n  };\r\n  const statusHandler = event => setStatus(event.target.value);\r\n  return (\r\n    <form>\r\n      <input\r\n        type=\"text\"\r\n        className=\"todo-input\"\r\n        onChange={InputTextHandler}\r\n        value={inputText}\r\n      />\r\n      <button className=\"todo-button\" type=\"submit\" onClick={submitTodoHandler}>\r\n        <i className=\"fas fa-plus-square\"></i>\r\n      </button>\r\n      <div className=\"select\">\r\n        <select name=\"todos\" className=\"filter-todo\" onChange={statusHandler}>\r\n          <option value=\"all\">All</option>\r\n          <option value=\"completed\">Completed</option>\r\n          <option value=\"uncompleted\">Uncompleted</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nconst Todo = ({ text, todo, todos, setTodos }) => {\r\n  const deleteHandler = () =>\r\n    setTodos(todos.filter(element => element.id !== todo.id));\r\n\r\n  const completeHandler = () => {\r\n    setTodos(\r\n      todos.map(item => {\r\n        if (item.id === todo.id) {\r\n          return {\r\n            ...item,\r\n            completed: !item.completed,\r\n          };\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"todo\">\r\n      <li className={`todo-item ${todo.completed ? 'completed' : ''}`}>\r\n        {text}\r\n      </li>\r\n      <button className=\"complete-btn\" onClick={completeHandler}>\r\n        <i className=\"fas fa-check\"></i>\r\n      </button>\r\n      <button className=\"trash-btn\" onClick={deleteHandler}>\r\n        <i className=\"fas fa-trash\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from 'react';\r\nimport Todo from './Todo';\r\n\r\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\r\n  return (\r\n    <div className=\"todo-container\">\r\n      <ul className=\"todo-list\">\r\n        {filteredTodos.map(todo => (\r\n          <Todo\r\n            text={todo.text}\r\n            key={todo.id}\r\n            todo={todo}\r\n            todos={todos}\r\n            setTodos={setTodos}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport Form from './components/Form';\r\nimport TodoList from './components/TodoList';\r\n\r\nfunction App() {\r\n  const [inputText, setInputText] = useState('');\r\n  const [todos, setTodos] = useState([]);\r\n  const [status, setStatus] = useState('all');\r\n  const [filteredTodos, setfilteredTodos] = useState([]);\r\n\r\n  useEffect(() => getLocalTodos(), []);\r\n\r\n  useEffect(() => {\r\n    const filterHandler = () => {\r\n      switch (status) {\r\n        case 'completed':\r\n          setfilteredTodos(todos.filter(todo => todo.completed === true));\r\n          break;\r\n        case 'uncompleted':\r\n          setfilteredTodos(todos.filter(todo => todo.completed === false));\r\n          break;\r\n        default:\r\n          setfilteredTodos(todos);\r\n          break;\r\n      }\r\n    };\r\n    filterHandler();\r\n    const saveLocalTodos = () =>\r\n      localStorage.setItem('todos', JSON.stringify(todos));\r\n    saveLocalTodos();\r\n  }, [todos, status]);\r\n\r\n  const getLocalTodos = () => {\r\n    if (localStorage.getItem('todos') === null) {\r\n      localStorage.setItem('todos', JSON.stringify([]));\r\n    } else {\r\n      let todoLocal = JSON.parse(localStorage.getItem('todos'));\r\n      setTodos(todoLocal);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>Priyanshu's Todo List</h1>\r\n      </header>\r\n      <Form\r\n        setInputText={setInputText}\r\n        todos={todos}\r\n        setTodos={setTodos}\r\n        inputText={inputText}\r\n        setStatus={setStatus}\r\n      />\r\n      <TodoList\r\n        setInputText={setInputText}\r\n        todos={todos}\r\n        setTodos={setTodos}\r\n        inputText={inputText}\r\n        filteredTodos={filteredTodos}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\nserviceWorkerRegistration.register();\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}